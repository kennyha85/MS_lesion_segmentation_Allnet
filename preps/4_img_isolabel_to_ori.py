import os
import numpy as np 
import nibabel.processing
import nibabel as nibabel 

from multiprocessing import Pool
from scipy.ndimage.measurements import label as getComponents

def doRegistration(src_path, tgt_path, T1_tgt_path, reg_mat_path):

    cmd = "/usr/local/fsl/bin/flirt -in " + src_path + " -ref " + T1_tgt_path + " -out " + tgt_path + " -applyxfm -init " + reg_mat_path + " -interp nearestneighbour"

    os.system(cmd)


def coregisterMaskToOri(tmp_mat_path, reg_src_path, reg_tgt_path, src_paths, tgt_paths, num, idx):

    reg_src_path_ori = os.path.join(reg_src_path, idx)
    reg_tgt_path_ori = os.path.join(reg_tgt_path, idx)
    tmp_mat_path_ori = os.path.join(tmp_mat_path, idx)

    dates = os.listdir(reg_src_path_ori)

    for date_ in dates:
        
        reg_src_path = os.path.join(reg_src_path_ori, date_)
        reg_tgt_path = os.path.join(reg_tgt_path_ori, date_)
        tmp_mat_path = os.path.join(tmp_mat_path_ori, date_)
        
        if os.path.isfile(reg_src_path):
            return

        os.makedirs(tmp_mat_path, exist_ok=True)
        files = os.listdir(reg_src_path)

        idx_date = None
        for file_ in files:
            if "T1_to_T2FLAIR_brain" in file_:
                T1_src_path = os.path.join(reg_src_path, file_)
                T1_tgt_path = os.path.join(reg_tgt_path, file_)
                idx_date = file_[:21]

        reg_t1_path  = os.path.join(tmp_mat_path, "reg_t1")
        reg_mat_path = os.path.join(tmp_mat_path, "reg.mat")

        if not os.path.exists(reg_mat_path):
            cmd_mat = "/usr/local/fsl/bin/flirt -in " + T1_src_path + " -ref " + T1_tgt_path + " -out " + reg_t1_path + " -omat " + reg_mat_path + " -bins 256 -cost corratio -searchrx -90 90 -searchry -90 90 -searchrz -90 90 -dof 12  -interp nearestneighbour"
            os.system(cmd_mat)

        for i in range(len(src_paths)):
            file_name = os.path.join(("%smask.nii.gz" % idx_date))
            os.makedirs(tgt_paths[i], exist_ok=True)

            src_mask_path = os.path.join(src_paths[i], file_name)
            tgt_mask_path = os.path.join(tgt_paths[i], file_name)

            doRegistration(src_mask_path, tgt_mask_path, T1_tgt_path, reg_mat_path)

        print("---->>>> Case %d with Id %s isotropic images generated by coregistration to NMI ..." % (num, idx))

if __name__ == "__main__":
    
    reg_src_path = './iso_data'
    reg_tgt_path = './working_pre'
    src_paths = ['./segmentations']
    tgt_paths = ['./segmentations_ori']

    tmp_mat_path = './mats'

    patient_ids = os.listdir(reg_src_path) 
    pool = Pool(processes=12)
    for i, idx in enumerate(patient_ids):
        # coregisterMaskToOri(tmp_mat_path, reg_src_path, reg_tgt_path, src_paths, tgt_paths, i, idx)
        pool.apply_async(coregisterMaskToOri, args=(tmp_mat_path, reg_src_path, reg_tgt_path, src_paths, tgt_paths, i, idx))
    
    print("--->>>> All processing to the pool")
    pool.close()
    pool.join()