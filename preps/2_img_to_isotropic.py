import os
import numpy as np 
import nibabel.processing
import nibabel as nibabel 

from multiprocessing import Pool
from scipy.ndimage.measurements import label as getComponents
from os.path import join as pjoin

def toIsotropicByNMIRegistration(src_path, tgt_path, num, idx):
    
    src_path = pjoin(src_path, idx)
    dates = os.listdir(src_path)

    for date_ in dates:

        src_path = os.path.join(src_path, date_)
        tgt_path = os.path.join(tgt_path, idx, date_)
        if os.path.isfile(src_path):
            return

        os.makedirs(tgt_path, exist_ok=True)
        files = os.listdir(src_path)

        for file_ in files:
            if "T1_to_T2FLAIR_brain" in file_:
                T1_src_path = os.path.join(src_path, file_)
                T1_tgt_path = os.path.join(tgt_path, file_)
            elif "T2_to_T2FLAIR_brain" in file_:
                T2_src_path = os.path.join(src_path, file_)
                T2_tgt_path = os.path.join(tgt_path, file_)
            else:
                flair_src_path = os.path.join(src_path, file_)
                flair_tgt_path = os.path.join(tgt_path, file_)
        
        t1_nmi_path = T1_tgt_path
        nmi_mat_path = os.path.join(tgt_path,"T1_to_nmi.mat")

        cmd_t1    = "/usr/local/fsl/bin/flirt -in " + T1_src_path + " -ref /usr/local/fsl/data/standard/MNI152_T1_1mm_brain.nii.gz" + " -out " + t1_nmi_path + " -omat " + nmi_mat_path + " -bins 256 -cost corratio -searchrx -90 90 -searchry -90 90 -searchrz -90 90 -dof 12  -interp trilinear"

        cmd_t2    = "/usr/local/fsl/bin/flirt -in " + T2_src_path + " -ref /usr/local/fsl/data/standard/MNI152_T1_1mm_brain.nii.gz" + " -out " + T2_tgt_path + " -applyxfm -init " + nmi_mat_path + " -interp trilinear"

        cmd_flair = "/usr/local/fsl/bin/flirt -in " + flair_src_path + " -ref /usr/local/fsl/data/standard/MNI152_T1_1mm_brain.nii.gz" + " -out " + flair_tgt_path + " -applyxfm -init " + nmi_mat_path + " -interp trilinear"

        os.system(cmd_t1)
        os.system(cmd_t2)
        os.system(cmd_flair)
        
        print("---->>>> Case %d date %s with Id %s isotropic images generated by coregistration to MNI ..." % (num, date_, idx))

if __name__ == "__main__":
    
    src_path = './working_pre'
    tgt_path = './iso_data'

    patient_ids = os.listdir(src_path) 
    pool = Pool(processes=12)
    for i, idx in enumerate(patient_ids):
        # toIsotropicByNMIRegistration(src_path, tgt_path, i, idx)
        pool.apply_async(toIsotropicByNMIRegistration, args=(src_path, tgt_path, i, idx))
    
    print("--->>>> All processing to the pool")
    pool.close()
    pool.join()